using System;
using System.Collections.Generic;
using System.Linq;

namespace day05
{
    class Program
    {
        static void RunCode(List<int> code, int input)
        {
            var ip = 0;
            while (true)
            {
                var instruction = code[ip];
                var op = instruction % 10 + instruction / 10 % 10 * 10;
                var a0 = instruction / 100 % 10;
                var a1 = instruction / 1000 % 10;
                var a2 = instruction / 10000 % 10;

                if (op == 1)
                {
                    code[code[ip + 3]] = (a0 == 0 ? code[code[ip + 1]] : code[ip + 1]) + (a1 == 0 ? code[code[ip + 2]] : code[ip + 2]);
                    ip += 4;
                }

                if (op == 2)
                {
                    code[code[ip + 3]] = (a0 == 0 ? code[code[ip + 1]] : code[ip + 1]) * (a1 == 0 ? code[code[ip + 2]] : code[ip + 2]);
                    ip += 4;
                }

                // input
                if (op == 3)
                {
                    code[code[ip + 1]] = input;
                    ip += 2;
                }
                // output
                if (op == 4)
                {
                    var output = (a0 == 0 ? code[code[ip + 1]] : code[ip + 1]);
                    Console.WriteLine(output);
                    ip += 2;
                }
                // jump-if-true
                if (op == 5)
                {
                    var p0 = (a0 == 0 ? code[code[ip + 1]] : code[ip + 1]);
                    var p1 = (a1 == 0 ? code[code[ip + 2]] : code[ip + 2]);
                    if (p0 != 0)
                        ip = p1;
                    else
                        ip += 3;
                }
                // jump-if-false
                if (op == 6)
                {
                    var p0 = (a0 == 0 ? code[code[ip + 1]] : code[ip + 1]);
                    var p1 = (a1 == 0 ? code[code[ip + 2]] : code[ip + 2]);
                    if (p0 == 0)
                        ip = p1;
                    else
                        ip += 3;
                }
                // less than
                if (op == 7)
                {
                    var p0 = (a0 == 0 ? code[code[ip + 1]] : code[ip + 1]);
                    var p1 = (a1 == 0 ? code[code[ip + 2]] : code[ip + 2]);
                    code[code[ip + 3]] = p0 < p1 ? 1 : 0;
                    ip += 4;
                }
                // equals
                if (op == 8)
                {
                    var p0 = (a0 == 0 ? code[code[ip + 1]] : code[ip + 1]);
                    var p1 = (a1 == 0 ? code[code[ip + 2]] : code[ip + 2]);
                    code[code[ip + 3]] = p0 == p1 ? 1 : 0;
                    ip += 4;
                }

                if (op == 99)
                {
                    break;
                }
            }
        }

        static void Main(string[] args)
        {
            var code = new List<int> { 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 2, 106, 196, 224, 101, -1157, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 7, 224, 1, 224, 223, 223, 1002, 144, 30, 224, 1001, 224, -1710, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 224, 223, 223, 101, 82, 109, 224, 1001, 224, -111, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 1102, 10, 50, 225, 1102, 48, 24, 224, 1001, 224, -1152, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1102, 44, 89, 225, 1101, 29, 74, 225, 1101, 13, 59, 225, 1101, 49, 60, 225, 1101, 89, 71, 224, 1001, 224, -160, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1101, 27, 57, 225, 102, 23, 114, 224, 1001, 224, -1357, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1001, 192, 49, 224, 1001, 224, -121, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1102, 81, 72, 225, 1102, 12, 13, 225, 1, 80, 118, 224, 1001, 224, -110, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 329, 101, 1, 223, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 344, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 359, 1001, 223, 1, 223, 107, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 374, 1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 389, 1001, 223, 1, 223, 107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 419, 101, 1, 223, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 434, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 464, 1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 479, 1001, 223, 1, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 101, 1, 223, 223, 7, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 509, 1001, 223, 1, 223, 108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 524, 101, 1, 223, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 539, 101, 1, 223, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 554, 101, 1, 223, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 569, 101, 1, 223, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 1107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 599, 101, 1, 223, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 629, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 644, 101, 1, 223, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 659, 101, 1, 223, 223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226 };

            // Part 1
            RunCode(code.ToList(), 1);

            // Part 2
            RunCode(code.ToList(), 5);
        }
    }
}
